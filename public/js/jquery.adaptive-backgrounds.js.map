{"version":3,"sources":["jquery.adaptive-backgrounds.js"],"names":[],"mappingsfile":"jquery.adaptive-backgrounds.js","sourcesContent":["\n/* jshint debug: true, expr: true */\n\n;(function($){\n\n  /* Constants & defaults. */\n  var DATA_COLOR    = 'data-ab-color';\n  var DATA_PARENT   = 'data-ab-parent';\n  var DATA_CSS_BG   = 'data-ab-css-background';\n  var EVENT_CF      = 'ab-color-found';\n\n  var DEFAULTS      = {\n    selector:             '[data-adaptive-background]',\n    parent:               null,\n    exclude:              [ 'rgb(0,0,0)', 'rgba(255,255,255)' ],\n    normalizeTextColor:   false,\n    normalizedTextColors:  {\n      light:      \"#fff\",\n      dark:       \"#000\"\n    },\n    lumaClasses:  {\n      light:      \"ab-light\",\n      dark:       \"ab-dark\"\n    }\n  };\n\n  // Include RGBaster - https://github.com/briangonzalez/rgbaster.js\n  /* jshint ignore:start */\n  !function(n){\"use strict\";var t=function(){return document.createElement(\"canvas\").getContext(\"2d\")},e=function(n,e){var a=new Image,o=n.src||n;\"data:\"!==o.substring(0,5)&&(a.crossOrigin=\"Anonymous\"),a.onload=function(){var n=t(\"2d\");n.drawImage(a,0,0);var o=n.getImageData(0,0,a.width,a.height);e&&e(o.data)},a.src=o},a=function(n){return[\"rgb(\",n,\")\"].join(\"\")},o=function(n){return n.map(function(n){return a(n.name)})},r=5,i=10,c={};c.colors=function(n,t){t=t||{};var c=t.exclude||[],u=t.paletteSize||i;e(n,function(e){for(var i=n.width*n.height||e.length,m={},s=\"\",d=[],f={dominant:{name:\"\",count:0},palette:Array.apply(null,new Array(u)).map(Boolean).map(function(){return{name:\"0,0,0\",count:0}})},l=0;i>l;){if(d[0]=e[l],d[1]=e[l+1],d[2]=e[l+2],s=d.join(\",\"),m[s]=s in m?m[s]+1:1,-1===c.indexOf(a(s))){var g=m[s];g>f.dominant.count?(f.dominant.name=s,f.dominant.count=g):f.palette.some(function(n){return g>n.count?(n.name=s,n.count=g,!0):void 0})}l+=4*r}if(t.success){var p=o(f.palette);t.success({dominant:a(f.dominant.name),secondary:p[0],palette:p})}})},n.RGBaster=n.RGBaster||c}(window);\n  /* jshint ignore:end */\n\n\n  /*\n    Our main function declaration.\n  */\n  $.adaptiveBackground = {\n    run: function( options ){\n      var opts = $.extend({}, DEFAULTS, options);\n\n      /* Loop over each element, waiting for it to load\n         then finding its color, and triggering the\n         color found event when color has been found.\n      */\n      $( opts.selector ).each(function(index, el){\n        var $this = $(this);\n\n        /*  Small helper functions which applies\n            colors, attrs, triggers events, etc.\n        */\n        var handleColors = function () {\n          var img = useCSSBackground() ? getCSSBackground() : $this[0];\n\n          RGBaster.colors(img, {\n            paletteSize: 20,\n            exclude: opts.exclude,\n            success: function(colors) {\n              $this.attr(DATA_COLOR, colors.dominant);\n              $this.trigger(EVENT_CF, { color: colors.dominant, palette: colors.palette });\n            }\n          });\n\n        };\n\n        var useCSSBackground = function(){\n          var attr = $this.attr( DATA_CSS_BG );\n          return (typeof attr !== typeof undefined && attr !== false);\n        };\n\n        var getCSSBackground = function(){\n          var str = $this.css('background-image');\n          var regex = /\\(([^)]+)\\)/;\n          var match = regex.exec(str)[1].replace(/\"/g, '')\n          return match;\n        };\n\n        /* Subscribe to our color-found event. */\n        $this.on( EVENT_CF, function(ev, data){\n\n          // Try to find the parent.\n          var $parent;\n          if ( opts.parent && $this.parents( opts.parent ).length ) {\n            $parent = $this.parents( opts.parent );\n          }\n          else if ( $this.attr( DATA_PARENT ) && $this.parents( $this.attr( DATA_PARENT ) ).length ){\n            $parent = $this.parents( $this.attr( DATA_PARENT ) );\n          }\n          else if ( useCSSBackground() ){\n            $parent = $this;\n          }\n          else if (opts.parent) {\n            $parent = $this.parents( opts.parent );\n          }\n          else {\n            $parent = $this.parent();\n          }\n\n          $parent.css({ backgroundColor: data.color });\n\n          // Helper function to calculate yiq - http://en.wikipedia.org/wiki/YIQ\n          var getYIQ = function(color){\n            var rgb = data.color.match(/\\d+/g);\n            return ((rgb[0]*299)+(rgb[1]*587)+(rgb[2]*114))/1000;\n          };\n\n          var getNormalizedTextColor = function (color){\n            return getYIQ(color) >= 128 ? opts.normalizedTextColors.dark : opts.normalizedTextColors.light;\n          };\n\n          var getLumaClass = function (color){\n            return getYIQ(color) <= 128 ? opts.lumaClasses.dark : opts.lumaClasses.light;\n          };\n\n          // Normalize the text color based on luminance.\n          if ( opts.normalizeTextColor )\n            $parent.css({ color: getNormalizedTextColor(data.color) });\n\n          // Add a class based on luminance.\n          $parent.addClass( getLumaClass(data.color) )\n                 .attr('data-ab-yaq', getYIQ(data.color));\n\n          opts.success && opts.success($this, data);\n        });\n\n        /* Handle the colors. */\n        handleColors();\n\n      });\n    },\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}